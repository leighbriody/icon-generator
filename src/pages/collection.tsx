import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import Image from "next/image";
import { FaLock, FaUnlock } from "react-icons/fa";
import { type Icon } from "@prisma/client";
import { useState } from "react";

const CollectionPage: NextPage = () => {
  const icons = api.icons.getIcons.useQuery();

  const [isDownloadingAsset, setIsDownloadingAsset] = useState<Icon | null>(
    null
  );

  const makePrivate = api.icons.makeAssetPrivate.useMutation({
    onSuccess(data) {
      console.log("make asset private success", data);
      //reload the icons
      void icons.refetch();
    },
    onError(error) {
      console.log("make asset private error", error);
    },
  });

  const MakePublic = api.icons.makeAssetPublic.useMutation({
    onSuccess(data) {
      console.log("make asset public success", data);
      //reload the icons
      void icons.refetch();
    },
    onError(error) {
      console.log("make asset public error", error);
    },
  });

  async function downloadAsset(icon: Icon) {
    setIsDownloadingAsset(icon);
    const assetSource = `https://leighs-icon-generator.s3.amazonaws.com/${icon.id}`;

    // Fetch the image data
    await fetch(assetSource)
      .then((response) => response.blob())
      .then((blob) => {
        // Create a temporary download link
        const downloadLink = document.createElement("a");
        const url = URL.createObjectURL(blob);
        downloadLink.href = url;
        downloadLink.download = `icon_${icon.id}.png`; // Specify the filename for the downloaded asset

        // Trigger the download
        downloadLink.click();

        // Clean up the temporary URL object
        URL.revokeObjectURL(url);
      })
      .catch((error) => console.error("Error downloading asset:", error));
    setIsDownloadingAsset(null);
  }

  function makeAssetPrivate(iconId: string) {
    makePrivate.mutate({ iconId: iconId });
  }

  function makeAssetPublic(iconId: string) {
    MakePublic.mutate({ iconId: iconId });
  }

  return (
    <>
      <Head>
        <title>Your Icons</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-24 flex flex-col items-center gap-8 px-8">
        <h1 className="text-4xl">Your Assets</h1>
        <ul className="grid grid-cols-2 gap-8 sm:grid-cols-4 sm:gap-12">
          {icons.data?.map((icon) => (
            <div key={icon.id} className="overflow-hidden rounded shadow-lg">
              <Image
                className="w-full"
                width={250}
                height={250}
                alt={icon.prompt ?? "Icon"}
                src={`https://leighs-icon-generator.s3.amazonaws.com/${icon.id}`}
              />
              <div className="flex flex-col p-4">
                <p className="text-gray-600">{icon.prompt}</p>
                <div className="mt-2 flex flex-wrap gap-2">
                  {icon.promptOptions?.map((option) => (
                    <span
                      key={option}
                      className="rounded bg-blue-100 px-2.5 py-0.5 text-xs font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-300"
                    >
                      {option}
                    </span>
                  ))}
                </div>
                {/* 2 buttons here side by side */}
                <div className="mt-4 flex">
                  {icon.isPublic && (
                    <button
                      className="mr-2 inline-flex items-center rounded bg-red-500 px-4 py-2 text-white hover:bg-red-600"
                      onClick={() => makeAssetPrivate(icon.id)}
                    >
                      <FaLock className="mr-2" /> Make Private
                    </button>
                  )}

                  {!icon.isPublic && (
                    <button
                      className="mr-2 inline-flex items-center rounded bg-green-500 px-4 py-2 text-white hover:bg-green-600 "
                      onClick={() => makeAssetPublic(icon.id)}
                    >
                      <FaUnlock className="mr-2" /> Share Publicly
                    </button>
                  )}

                  <button
                    className="inline-flex items-center rounded  bg-blue-500  px-4 py-2 font-bold text-white hover:bg-blue-600"
                    onClick={() => {
                      void downloadAsset(icon);
                    }}
                  >
                    <svg
                      className="mr-2 h-4 w-4 fill-current"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 20 20"
                    >
                      <path d="M13 8V2H7v6H2l8 8 8-8h-5zM0 18h20v2H0v-2z" />
                    </svg>
                    <span>Download</span>
                    {isDownloadingAsset == icon && (
                      <svg
                        className="-mr-1 ml-3 h-5 w-5 animate-spin text-white"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12z"
                        ></path>
                      </svg>
                    )}
                  </button>
                </div>
              </div>
            </div>
          ))}
        </ul>
      </main>
    </>
  );
};

export default CollectionPage;
