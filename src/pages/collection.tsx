import { type NextPage } from "next";
import Head from "next/head";
import { api } from "~/utils/api";
import Image from "next/image";
import { FaLock, FaUnlock } from "react-icons/fa";
import { type Icon } from "@prisma/client";
import { useState } from "react";

const CollectionPage: NextPage = () => {
  const icons = api.icons.getIcons.useQuery();

  const [isDownloadingAsset, setIsDownloadingAsset] = useState<Icon | null>(
    null
  );

  const [expandedIcons, setExpandedIcons] = useState([]);
  const [selectedIcon, setSelectedIcon] = useState<string | null>(null);

  const makePrivate = api.icons.makeAssetPrivate.useMutation({
    onSuccess(data) {
      console.log("make asset private success", data);
      //reload the icons
      void icons.refetch();
    },
    onError(error) {
      console.log("make asset private error", error);
    },
  });

  const MakePublic = api.icons.makeAssetPublic.useMutation({
    onSuccess(data) {
      console.log("make asset public success", data);
      //reload the icons
      void icons.refetch();
    },
    onError(error) {
      console.log("make asset public error", error);
    },
  });

  async function downloadAsset(icon: Icon) {
    setIsDownloadingAsset(icon);
    const assetSource = `https://leighs-icon-generator.s3.amazonaws.com/${icon.id}`;

    // Fetch the image data
    await fetch(assetSource)
      .then((response) => response.blob())
      .then((blob) => {
        // Create a temporary download link
        const downloadLink = document.createElement("a");
        const url = URL.createObjectURL(blob);
        downloadLink.href = url;
        downloadLink.download = `icon_${icon.id}.png`; // Specify the filename for the downloaded asset

        // Trigger the download
        downloadLink.click();

        // Clean up the temporary URL object
        URL.revokeObjectURL(url);
      })
      .catch((error) => console.error("Error downloading asset:", error));
    setIsDownloadingAsset(null);
  }

  function makeAssetPrivate(iconId: string) {
    makePrivate.mutate({ iconId: iconId });
  }

  function makeAssetPublic(iconId: string) {
    MakePublic.mutate({ iconId: iconId });
  }

  return (
    <>
      <Head>
        <title>Your Icons</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto mt-24 flex flex-col items-center gap-8 px-8">
        <h1 className="text-4xl">Your Assets</h1>
        <ul className="grid grid-cols-2 gap-8 sm:grid-cols-2 sm:gap-12 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-6">
          {icons.data?.map((icon: Icon) => (
            <div key={icon.id} className="group relative">
              <Image
                className="w-full"
                width={250}
                height={250}
                alt={icon.prompt ?? "Icon"}
                src={`https://leighs-icon-generator.s3.amazonaws.com/${icon.id}`}
              />
              <button
                className="absolute right-2 top-2 rounded-full bg-gray-200 p-2 transition-colors duration-300 ease-in-out group-hover:bg-gray-800"
                onClick={() => {
                  if (selectedIcon === icon.id) {
                    setSelectedIcon(null); // Close the dropdown
                  } else {
                    setSelectedIcon(icon.id); // Open the dropdown
                  }
                }}
              >
                {/* Add your menu button icon here */}
                {/* For example, you can use an SVG */}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  strokeWidth="2"
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  className="h-6 w-6 text-gray-900"
                >
                  <path d="M3 12h18M3 6h18M3 18h18"></path>
                </svg>
              </button>
              {selectedIcon === icon.id && (
                <div className="absolute right-2 top-10 z-10 rounded-md bg-gray-800 p-2">
                  <ul className="space-y-2">
                    {icon.isPublic && (
                      <li>
                        <button
                          className="text-white hover:text-gray-200"
                          onClick={() => makeAssetPrivate(icon.id)}
                        >
                          Make Private
                        </button>
                      </li>
                    )}

                    {!icon.isPublic && (
                      <li>
                        <button
                          className="text-white hover:text-gray-200"
                          onClick={() => makeAssetPublic(icon.id)}
                        >
                          Make Public
                        </button>
                      </li>
                    )}
                    <li>
                      <button
                        className="text-white hover:text-gray-200"
                        onClick={() => {
                          void downloadAsset(icon);
                        }}
                      >
                        Download
                      </button>
                    </li>
                  </ul>
                </div>
              )}
            </div>
          ))}
        </ul>
      </main>
    </>
  );
};

export default CollectionPage;
